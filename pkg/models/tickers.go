// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Ticker is an object representing the database table.
type Ticker struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Ticker    string    `boil:"ticker" json:"ticker" toml:"ticker" yaml:"ticker"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *tickerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tickerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TickerColumns = struct {
	ID        string
	Name      string
	Ticker    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	Ticker:    "ticker",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var TickerTableColumns = struct {
	ID        string
	Name      string
	Ticker    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "tickers.id",
	Name:      "tickers.name",
	Ticker:    "tickers.ticker",
	CreatedAt: "tickers.created_at",
	UpdatedAt: "tickers.updated_at",
}

// Generated where

var TickerWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	Ticker    whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"tickers\".\"id\""},
	Name:      whereHelperstring{field: "\"tickers\".\"name\""},
	Ticker:    whereHelperstring{field: "\"tickers\".\"ticker\""},
	CreatedAt: whereHelpernull_Time{field: "\"tickers\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"tickers\".\"updated_at\""},
}

// TickerRels is where relationship names are stored.
var TickerRels = struct {
}{}

// tickerR is where relationships are stored.
type tickerR struct {
}

// NewStruct creates a new relationship struct
func (*tickerR) NewStruct() *tickerR {
	return &tickerR{}
}

// tickerL is where Load methods for each relationship are stored.
type tickerL struct{}

var (
	tickerAllColumns            = []string{"id", "name", "ticker", "created_at", "updated_at"}
	tickerColumnsWithoutDefault = []string{"name", "ticker"}
	tickerColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	tickerPrimaryKeyColumns     = []string{"id"}
	tickerGeneratedColumns      = []string{}
)

type (
	// TickerSlice is an alias for a slice of pointers to Ticker.
	// This should almost always be used instead of []Ticker.
	TickerSlice []*Ticker
	// TickerHook is the signature for custom Ticker hook methods
	TickerHook func(context.Context, boil.ContextExecutor, *Ticker) error

	tickerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tickerType                 = reflect.TypeOf(&Ticker{})
	tickerMapping              = queries.MakeStructMapping(tickerType)
	tickerPrimaryKeyMapping, _ = queries.BindMapping(tickerType, tickerMapping, tickerPrimaryKeyColumns)
	tickerInsertCacheMut       sync.RWMutex
	tickerInsertCache          = make(map[string]insertCache)
	tickerUpdateCacheMut       sync.RWMutex
	tickerUpdateCache          = make(map[string]updateCache)
	tickerUpsertCacheMut       sync.RWMutex
	tickerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tickerAfterSelectMu sync.Mutex
var tickerAfterSelectHooks []TickerHook

var tickerBeforeInsertMu sync.Mutex
var tickerBeforeInsertHooks []TickerHook
var tickerAfterInsertMu sync.Mutex
var tickerAfterInsertHooks []TickerHook

var tickerBeforeUpdateMu sync.Mutex
var tickerBeforeUpdateHooks []TickerHook
var tickerAfterUpdateMu sync.Mutex
var tickerAfterUpdateHooks []TickerHook

var tickerBeforeDeleteMu sync.Mutex
var tickerBeforeDeleteHooks []TickerHook
var tickerAfterDeleteMu sync.Mutex
var tickerAfterDeleteHooks []TickerHook

var tickerBeforeUpsertMu sync.Mutex
var tickerBeforeUpsertHooks []TickerHook
var tickerAfterUpsertMu sync.Mutex
var tickerAfterUpsertHooks []TickerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ticker) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ticker) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ticker) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ticker) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ticker) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ticker) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ticker) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ticker) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ticker) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tickerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTickerHook registers your hook function for all future operations.
func AddTickerHook(hookPoint boil.HookPoint, tickerHook TickerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tickerAfterSelectMu.Lock()
		tickerAfterSelectHooks = append(tickerAfterSelectHooks, tickerHook)
		tickerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tickerBeforeInsertMu.Lock()
		tickerBeforeInsertHooks = append(tickerBeforeInsertHooks, tickerHook)
		tickerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tickerAfterInsertMu.Lock()
		tickerAfterInsertHooks = append(tickerAfterInsertHooks, tickerHook)
		tickerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tickerBeforeUpdateMu.Lock()
		tickerBeforeUpdateHooks = append(tickerBeforeUpdateHooks, tickerHook)
		tickerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tickerAfterUpdateMu.Lock()
		tickerAfterUpdateHooks = append(tickerAfterUpdateHooks, tickerHook)
		tickerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tickerBeforeDeleteMu.Lock()
		tickerBeforeDeleteHooks = append(tickerBeforeDeleteHooks, tickerHook)
		tickerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tickerAfterDeleteMu.Lock()
		tickerAfterDeleteHooks = append(tickerAfterDeleteHooks, tickerHook)
		tickerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tickerBeforeUpsertMu.Lock()
		tickerBeforeUpsertHooks = append(tickerBeforeUpsertHooks, tickerHook)
		tickerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tickerAfterUpsertMu.Lock()
		tickerAfterUpsertHooks = append(tickerAfterUpsertHooks, tickerHook)
		tickerAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ticker record from the query using the global executor.
func (q tickerQuery) OneG(ctx context.Context) (*Ticker, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ticker record from the query.
func (q tickerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Ticker, error) {
	o := &Ticker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tickers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Ticker records from the query using the global executor.
func (q tickerQuery) AllG(ctx context.Context) (TickerSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Ticker records from the query.
func (q tickerQuery) All(ctx context.Context, exec boil.ContextExecutor) (TickerSlice, error) {
	var o []*Ticker

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Ticker slice")
	}

	if len(tickerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Ticker records in the query using the global executor
func (q tickerQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Ticker records in the query.
func (q tickerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tickers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tickerQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q tickerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tickers exists")
	}

	return count > 0, nil
}

// Tickers retrieves all the records using an executor.
func Tickers(mods ...qm.QueryMod) tickerQuery {
	mods = append(mods, qm.From("\"tickers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tickers\".*"})
	}

	return tickerQuery{q}
}

// FindTickerG retrieves a single record by ID.
func FindTickerG(ctx context.Context, iD int, selectCols ...string) (*Ticker, error) {
	return FindTicker(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTicker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTicker(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Ticker, error) {
	tickerObj := &Ticker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tickers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tickerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tickers")
	}

	if err = tickerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tickerObj, err
	}

	return tickerObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Ticker) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ticker) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tickers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tickerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tickerInsertCacheMut.RLock()
	cache, cached := tickerInsertCache[key]
	tickerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tickerAllColumns,
			tickerColumnsWithDefault,
			tickerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tickerType, tickerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tickerType, tickerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tickers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tickers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tickers")
	}

	if !cached {
		tickerInsertCacheMut.Lock()
		tickerInsertCache[key] = cache
		tickerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Ticker record using the global executor.
// See Update for more documentation.
func (o *Ticker) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Ticker.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ticker) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tickerUpdateCacheMut.RLock()
	cache, cached := tickerUpdateCache[key]
	tickerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tickerAllColumns,
			tickerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tickers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tickers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tickerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tickerType, tickerMapping, append(wl, tickerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tickers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tickers")
	}

	if !cached {
		tickerUpdateCacheMut.Lock()
		tickerUpdateCache[key] = cache
		tickerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tickerQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tickerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tickers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tickers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TickerSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TickerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tickers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tickerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ticker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ticker")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Ticker) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Ticker) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no tickers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tickerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tickerUpsertCacheMut.RLock()
	cache, cached := tickerUpsertCache[key]
	tickerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tickerAllColumns,
			tickerColumnsWithDefault,
			tickerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tickerAllColumns,
			tickerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tickers, could not build update column list")
		}

		ret := strmangle.SetComplement(tickerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tickerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert tickers, could not build conflict column list")
			}

			conflict = make([]string, len(tickerPrimaryKeyColumns))
			copy(conflict, tickerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tickers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tickerType, tickerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tickerType, tickerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tickers")
	}

	if !cached {
		tickerUpsertCacheMut.Lock()
		tickerUpsertCache[key] = cache
		tickerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Ticker record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Ticker) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Ticker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ticker) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Ticker provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tickerPrimaryKeyMapping)
	sql := "DELETE FROM \"tickers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tickers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tickers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tickerQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q tickerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tickerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tickers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tickers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TickerSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TickerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tickerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tickers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tickerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tickers")
	}

	if len(tickerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Ticker) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Ticker provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ticker) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTicker(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TickerSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TickerSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TickerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TickerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tickers\".* FROM \"tickers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tickerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TickerSlice")
	}

	*o = slice

	return nil
}

// TickerExistsG checks if the Ticker row exists.
func TickerExistsG(ctx context.Context, iD int) (bool, error) {
	return TickerExists(ctx, boil.GetContextDB(), iD)
}

// TickerExists checks if the Ticker row exists.
func TickerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tickers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tickers exists")
	}

	return exists, nil
}

// Exists checks if the Ticker row exists.
func (o *Ticker) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TickerExists(ctx, exec, o.ID)
}
